// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(PATIENT)
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  appointmentsAsPatient Appointment[] @relation("PatientAppointments")
  appointmentsAsDoctor  Appointment[] @relation("DoctorAppointments")
  reviews               Review[]
  prescriptions         Prescription[]

  @@map("users")
}

model Appointment {
  id              String            @id @default(cuid())
  petName         String
  animalType      String
  breed           String
  petAge          String
  reason          String
  doctorSpecialty String
  date            DateTime
  time            String
  status          AppointmentStatus @default(PENDING)
  priority        Priority          @default(MEDIUM)
  additionalNotes String?
  doctorNotes     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  patientId String
  patient   User @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  
  doctorId String?
  doctor   User? @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: SetNull)

  prescription Prescription?
  review       Review?

  @@map("appointments")
}

model Prescription {
  id                   String   @id @default(cuid())
  diagnosis            String
  followUpInstructions String
  nextAppointment      DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  
  doctorId String
  doctor   User   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  medications Medication[]

  @@map("prescriptions")
}

model Medication {
  id           String  @id @default(cuid())
  name         String
  dosage       String
  frequency    String
  duration     String
  instructions String?

  // Relations
  prescriptionId String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)

  @@map("medications")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  
  patientId String
  patient   User   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

enum Role {
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
